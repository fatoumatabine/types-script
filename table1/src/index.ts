/**
 * Fichier principal - Point d'entr√©e de tous les exemples TypeScript
 * Importe et ex√©cute tous les exemples des diff√©rents concepts
 */

// Imports de tous les exemples
import { exempleConstructeur } from './01-constructeur-methodes/constructeur';
import { exempleConstructeurPrive } from './02-constructeur-prive/constructeur-prive';
import { exempleModificateursAcces } from './03-modificateurs-acces/modificateurs-acces';
import { exempleInterfaceClasse } from './04-interface-classe/interface-classe';
import { exempleHeritage } from './05-heritage/heritage';
import { exemplesGeneriques } from './06-generiques-types/generiques';
import { exempleDecorators } from './07-decorators/decorators';
import { exemplesTypesAvances } from './08-types-avances/types-avances';
import { exempleAsynchrone } from './09-asynchrone/asynchrone';

/**
 * Fonction principale qui ex√©cute tous les exemples
 */
async function executerTousLesExemples(): Promise<void> {
    console.log("üöÄ D√âMARRAGE DES EXEMPLES TYPESCRIPT");
    console.log("=====================================");
    
    try {
        // 1. Constructeur et m√©thodes
        console.log("\nüìù 1. CONSTRUCTEUR ET M√âTHODES");
        exempleConstructeur();
        
        // 2. Constructeur priv√©
        console.log("\nüîí 2. CONSTRUCTEUR PRIV√â");
        exempleConstructeurPrive();
        
        // 3. Modificateurs d'acc√®s
        console.log("\nüîê 3. MODIFICATEURS D'ACC√àS");
        exempleModificateursAcces();
        
        // 4. Interface et classe concr√®te
        console.log("\nüìã 4. INTERFACE ET CLASSE CONCR√àTE");
        exempleInterfaceClasse();
        
        // 5. H√©ritage
        console.log("\nüß¨ 5. H√âRITAGE");
        exempleHeritage();
        
        // 6. G√©n√©riques et Types
        console.log("\nüéØ 6. G√âN√âRIQUES ET TYPES");
        exemplesGeneriques();
        
        // 7. D√©corateurs
        console.log("\n‚ú® 7. D√âCORATEURS");
        exempleDecorators();
        
        // 8. Types avanc√©s
        console.log("\nüî¨ 8. TYPES AVANC√âS");
        exemplesTypesAvances();
        
        // 9. Code asynchrone
        console.log("\n‚ö° 9. CODE ASYNCHRONE");
        await exempleAsynchrone();
        
    } catch (error) {
        console.error("‚ùå Erreur lors de l'ex√©cution des exemples:", error);
    }
    
    console.log("\n‚úÖ TOUS LES EXEMPLES ONT √âT√â EX√âCUT√âS");
    console.log("=====================================");
}

/**
 * Fonction utilitaire pour cr√©er une s√©paration visuelle
 */
function afficherSeparateur(titre: string): void {
    console.log(`\n${'='.repeat(50)}`);
    console.log(`  ${titre}`);
    console.log(`${'='.repeat(50)}`);
}

/**
 * D√©monstration de concepts TypeScript additionnels
 */
function conceptsSupplementaires(): void {
    afficherSeparateur("CONCEPTS SUPPL√âMENTAIRES");
    
    // Types litt√©raux
    type Direction = 'haut' | 'bas' | 'gauche' | 'droite';
    const direction: Direction = 'haut';
    console.log(`Direction choisie: ${direction}`);
    
    // Types d'assertion (exemple pour le DOM - non disponible en Node.js)
    // const element = document.getElementById('monElement') as HTMLInputElement;
    // console.log("Element:", element?.value);
    console.log("Types d'assertion d√©montr√©s (DOM non disponible en Node.js)");
    
    // Types de garde (Type Guards)
    function estString(valeur: any): valeur is string {
        return typeof valeur === 'string';
    }
    
    function traiterValeur(valeur: string | number): void {
        if (estString(valeur)) {
            console.log(`Traitement d'une cha√Æne: ${valeur.toUpperCase()}`);
        } else {
            console.log(`Traitement d'un nombre: ${valeur * 2}`);
        }
    }
    
    traiterValeur("hello");
    traiterValeur(42);
    
    // Types mapp√©s
    interface PersonneBase {
        nom: string;
        age: number;
        email: string;
    }
    
    type PersonneOptionnelle = {
        [K in keyof PersonneBase]?: PersonneBase[K];
    };
    
    const personnPartielle: PersonneOptionnelle = {
        nom: "Alice"
        // age et email sont optionnels
    };
    
    console.log("Personne partielle:", personnPartielle);
    
    // Keyof et Lookup Types
    type ClefsPersonne = keyof PersonneBase; // "nom" | "age" | "email"
    type TypeAge = PersonneBase['age']; // number
    
    console.log("D√©monstration des types avanc√©s termin√©e");
}

// Point d'entr√©e du programme
if (require.main === module) {
    executerTousLesExemples().then(() => {
        conceptsSupplementaires();
    }).catch(error => {
        console.error("Erreur fatale:", error);
    });
}

// Exports pour utilisation dans d'autres modules
export {
    executerTousLesExemples,
    conceptsSupplementaires,
    afficherSeparateur
};
