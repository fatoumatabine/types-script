/**
 * PROJET COMPLET TYPESCRIPT - TOUS LES CONCEPTS
 * =============================================
 * 
 * Ce fichier importe et d√©montre tous les concepts TypeScript
 * organis√©s dans des dossiers s√©par√©s pour un apprentissage structur√©.
 * 
 * 18 CONCEPTS COUVERTS :
 * 1. Number - Types num√©riques
 * 2. Function - Types de fonctions  
 * 3. Boolean - Types bool√©ens
 * 4. Enum - √ânum√©rations
 * 5. String - Types cha√Ænes
 * 6. Union - Types union
 * 7. Never - Type never
 * 8. Extends - H√©ritage
 * 9. G√©n√©riques - Types g√©n√©riques
 * 10. Object - Types objets
 * 11. Alias - Alias de types
 * 12. Objets anonymes
 * 13. Retour de fonction
 * 14. M√©thodes Find
 * 15. Types intrins√®ques
 * 16. Void et undefined
 * 17. Tableaux
 * 18. Fonctions avec retour
 */

// ‚úÖ IMPORTS DE TOUS LES MODULES
import * as NumberExamples from "./01-number/exemple-number";
import * as FunctionExamples from "./02-function-type/exemple-function";
import * as BooleanExamples from "./03-boolean/exemple-boolean";
import * as EnumExamples from "./04-enum/exemple-enum";
import * as StringExamples from "./05-string/exemple-string";
import * as UnionExamples from "./06-type-union/exemple-union";
import * as NeverExamples from "./07-type-never/exemple-never";
import * as ExtendsExamples from "./08-extends/exemple-extends";
import * as GenericExamples from "./09-fonction-generique/exemple-generique";
import * as ObjectExamples from "./10-type-object/exemple-object";
import * as AliasExamples from "./11-alias-type-personnalise/exemple-alias";
import * as AnonymousExamples from "./12-type-objet-anonyme/exemple-objet-anonyme";
import * as ReturnExamples from "./13-type-retour-fonction/exemple-retour-fonction";
import * as FindExamples from "./14-find/exemple-find";
import * as IntrinsicExamples from "./15-type-objet-intrinseque/exemple-intrinseque";
import * as VoidUndefinedExamples from "./16-void-undefined/exemple-void-undefined";
import * as ArrayExamples from "./17-tableaux/exemple-tableaux";
import * as FnReturnExamples from "./18-fn-avec-retour/exemple-fn-avec-retour";

// ‚úÖ FONCTIONS UTILITAIRES
function afficherSection(titre: string, numero: number): void {
    console.log(`\n${"=".repeat(60)}`);
    console.log(`üìö ${numero}. ${titre.toUpperCase()}`);
    console.log(`${"=".repeat(60)}`);
}

function pauseEntreSections(): void {
    console.log("\n" + "-".repeat(50) + "\n");
}

function mesurer<T>(fn: () => T, nom: string): T {
    const debut = performance.now();
    const resultat = fn();
    const fin = performance.now();
    console.log(`‚è±Ô∏è  ${nom}: ${(fin - debut).toFixed(2)}ms`);
    return resultat;
}

// ‚úÖ FONCTION PRINCIPALE DE D√âMONSTRATION
async function demonstrationComplete(): Promise<void> {
    try {
        console.log("üöÄ D√âMARRAGE DE LA D√âMONSTRATION TYPESCRIPT COMPL√àTE");
        console.log("=" .repeat(80));
        console.log("üìñ 18 concepts TypeScript avec exemples pratiques");
        console.log("üéØ Code organis√© pour l'apprentissage progressif");
        console.log("=" .repeat(80));
        
        // 1. Numbers et op√©rations math√©matiques
        afficherSection("Types Number - Math√©matiques", 1);
        const calculateur = new NumberExamples.CalculatriceAvancee();
        console.log(`‚úÖ Addition: ${calculateur.additionner(15, 25)}`);
        console.log(`‚úÖ Racine carr√©e: ${NumberExamples.racineCarree(16)}`);
        console.log(`‚úÖ Nombre al√©atoire: ${NumberExamples.genererNombreAleatoire(1, 100)}`);
        console.log(`‚úÖ Formatage devise: ${NumberExamples.formaterDevise(1234.56)}`);
        pauseEntreSections();
        
        // 2. Functions et callbacks
        afficherSection("Types Function - Callbacks", 2);
        FunctionExamples.executerAvecCallback("T√¢che importante", () => {
            console.log("‚úÖ Callback ex√©cut√© avec succ√®s!");
        });
        
        const multiplierPar3 = FunctionExamples.creerMultiplicateur(3);
        console.log(`‚úÖ 5 √ó 3 = ${multiplierPar3(5)}`);
        
        const resultatCurry = FunctionExamples.currySomme(10)(20);
        console.log(`‚úÖ Curry somme: ${resultatCurry}`);
        pauseEntreSections();
        
        // 3. Booleans et logique
        afficherSection("Types Boolean - Logique", 3);
        const validateur = new BooleanExamples.ValidateurFormulaire();
        const emailValide = validateur.validerEmail("test@example.com");
        const motPasseValide = validateur.validerMotDePasse("MonMotDePasse123!");
        console.log(`‚úÖ Email valide: ${emailValide}`);
        console.log(`‚úÖ Mot de passe valide: ${motPasseValide}`);
        
        const conditions = BooleanExamples.evaluerConditions([true, false, true]);
        console.log(`‚úÖ √âvaluation conditions:`, conditions);
        pauseEntreSections();
        
        // 4. Enums et constantes
        afficherSection("Types Enum - Constantes", 4);
        const produit = EnumExamples.creerProduit("Ordinateur", EnumExamples.CategorieE.ELECTRONIQUE);
        console.log(`‚úÖ Produit cr√©√©: ${produit.nom} (${EnumExamples.CategorieE[produit.categorie]})`);
        
        const commande = new EnumExamples.GestionnaireCommandes();
        commande.changerStatut(EnumExamples.StatutCommande.EXPEDIE);
        console.log(`‚úÖ Statut commande: ${EnumExamples.StatutCommande[commande.obtenirStatut()]}`);
        pauseEntreSections();
        
        // 5. Strings et manipulation de texte
        afficherSection("Types String - Manipulation", 5);
        const processeur = new StringExamples.ProcesseurTexte();
        const texte = "Bonjour le monde TypeScript!";
        console.log(`‚úÖ Mots dans "${texte}": ${processeur.compterMots(texte)}`);
        console.log(`‚úÖ Invers√©: ${processeur.inverser(texte)}`);
        console.log(`‚úÖ Slug: ${StringExamples.creerSlug("Mon Article G√©nial!")}`);
        
        const generateur = new StringExamples.GenerateurTexte();
        console.log(`‚úÖ Mot de passe: ${generateur.genererMotDePasse(12)}`);
        pauseEntreSections();
        
        // 6. Union types et flexibilit√©
        afficherSection("Types Union - Flexibilit√©", 6);
        console.log(`‚úÖ ID string: ${UnionExamples.formaterId("user123")}`);
        console.log(`‚úÖ ID number: ${UnionExamples.formaterId(456)}`);
        
        const reponseSucces = UnionExamples.traiterReponseAPI({ status: 200, data: { message: "OK" } });
        const reponseErreur = UnionExamples.traiterReponseAPI("Erreur r√©seau");
        console.log(`‚úÖ R√©ponse succ√®s: ${reponseSucces}`);
        console.log(`‚úÖ R√©ponse erreur: ${reponseErreur}`);
        pauseEntreSections();
        
        // 7. Never type (gestion d'erreurs)
        afficherSection("Type Never - Gestion d'erreurs", 7);
        try {
            NeverExamples.traiterValeur("valeur inconnue" as any);
        } catch (error) {
            console.log(`‚úÖ Erreur captur√©e: ${error}`);
        }
        
        const divisionSecure = NeverExamples.divisionSecurisee(10, 2);
        console.log(`‚úÖ Division s√©curis√©e: ${divisionSecure}`);
        pauseEntreSections();
        
        // 8. Extends et h√©ritage
        afficherSection("Extends - H√©ritage", 8);
        const chien = new ExtendsExamples.Chien("Rex", 5, "Labrador");
        chien.faireDuBruit(); // Aboie
        chien.faireLeBeau();
        
        const employe = new ExtendsExamples.Employe("Alice", 30, "E001", "D√©veloppeuse");
        employe.presenter();
        employe.travailler();
        pauseEntreSections();
        
        // 9. G√©n√©riques et r√©utilisabilit√©
        afficherSection("G√©n√©riques - R√©utilisabilit√©", 9);
        const stockNombres = new GenericExamples.Stock<number>();
        stockNombres.ajouter(1).ajouter(2).ajouter(3);
        console.log(`‚úÖ Stock nombres: [${stockNombres.obtenirTous().join(", ")}]`);
        
        const cacheUtilisateurs = new GenericExamples.Cache<string>();
        cacheUtilisateurs.definir("user1", "Alice");
        cacheUtilisateurs.definir("user2", "Bob");
        console.log(`‚úÖ Cache utilisateur1: ${cacheUtilisateurs.obtenir("user1")}`);
        
        const resultatMap = GenericExamples.mapperTableau([1, 2, 3], x => x * 2);
        console.log(`‚úÖ Tableau mapp√©: [${resultatMap.join(", ")}]`);
        pauseEntreSections();
        
        // 10. Objects et structures
        afficherSection("Objects - Structures", 10);
        const gestionnaire = new ObjectExamples.GestionnaireUtilisateurs();
        const nouvelUtilisateur = gestionnaire.creerUtilisateur("Charlie", "charlie@test.com", 28);
        console.log(`‚úÖ Utilisateur cr√©√©: ${nouvelUtilisateur.nom} (${nouvelUtilisateur.email})`);
        
        const configServeur = ObjectExamples.creerConfigurationServeur({ port: 8080, ssl: true });
        console.log(`‚úÖ Configuration serveur:`, configServeur);
        pauseEntreSections();
        
        // 11. Type aliases
        afficherSection("Type Aliases - Simplification", 11);
        const coordonnees: AliasExamples.Coordonnees = [45.5017, -73.5673]; // Montr√©al
        console.log(`‚úÖ Coordonn√©es: ${AliasExamples.formaterCoordonnees(coordonnees)}`);
        
        const filtre: AliasExamples.FiltreNombres = (n) => n > 10;
        const nombres = [5, 15, 8, 20, 3];
        console.log(`‚úÖ Nombres > 10: [${nombres.filter(filtre).join(", ")}]`);
        
        const processeurAsync = new AliasExamples.ProcesseurAsynchrone();
        const resultatAsync = await processeurAsync.traiterDonnees([1, 2, 3, 4, 5]);
        console.log(`‚úÖ Traitement async: ${resultatAsync.succes ? "R√©ussi" : "√âchou√©"}`);
        pauseEntreSections();
        
        // 12. Objets anonymes
        afficherSection("Objets Anonymes - Structures ad-hoc", 12);
        const resultatAPI = AnonymousExamples.simulerAppelAPI();
        console.log(`‚úÖ R√©ponse API:`, resultatAPI);
        
        const evenement = AnonymousExamples.creerEvenement("click", { x: 100, y: 200 });
        console.log(`‚úÖ √âv√©nement cr√©√©:`, evenement);
        
        const donneesValidees = AnonymousExamples.validerDonnees({
            nom: "Test",
            age: 25,
            actif: true
        });
        console.log(`‚úÖ Validation:`, donneesValidees);
        pauseEntreSections();
        
        // 13. Types de retour de fonction
        afficherSection("Retour de Fonction - Types pr√©cis", 13);
        const analyseur = new ReturnExamples.AnalyseurDonnees();
        const statistiques = analyseur.analyserNombres([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
        console.log(`‚úÖ Statistiques:`, statistiques);
        
        const validationDonnees = await ReturnExamples.validerDonneesAsync({ 
            email: "test@example.com", 
            age: 25 
        });
        console.log(`‚úÖ Validation async:`, validationDonnees);
        pauseEntreSections();
        
        // 14. M√©thodes Find et recherche
        afficherSection("M√©thodes Find - Recherche", 14);
        const moteur = new FindExamples.MoteurRecherche();
        const personnes = [
            { nom: "Alice", age: 25, ville: "Paris" },
            { nom: "Bob", age: 30, ville: "Lyon" },
            { nom: "Charlie", age: 35, ville: "Paris" }
        ];
        
        moteur.ajouterDonnees(personnes);
        const resultats = moteur.rechercher({ ville: "Paris" });
        console.log(`‚úÖ Personnes √† Paris: ${resultats.map(p => p.nom).join(", ")}`);
        
        const index = new FindExamples.IndexRecherche();
        index.ajouter("doc1", "TypeScript est formidable");
        index.ajouter("doc2", "JavaScript et TypeScript");
        const docs = index.rechercher("TypeScript");
        console.log(`‚úÖ Documents trouv√©s: [${docs.join(", ")}]`);
        pauseEntreSections();
        
        // 15. Types intrins√®ques
        afficherSection("Types Intrins√®ques - Built-in", 15);
        const utilitaires = new IntrinsicExamples.UtilitairesIntrinseques();
        
        const tableauTest = [1, 2, 3, 4, 5];
        console.log(`‚úÖ Somme du tableau [${tableauTest.join(", ")}]: ${utilitaires.calculerSomme(tableauTest)}`);
        
        const dateFormatee = utilitaires.formaterDate(new Date());
        console.log(`‚úÖ Date actuelle format√©e: ${dateFormatee}`);
        
        const promiseChainee = await utilitaires.chainerPromises([
            () => Promise.resolve("√âtape 1"),
            () => Promise.resolve("√âtape 2"),
            () => Promise.resolve("√âtape 3")
        ]);
        console.log(`‚úÖ Promesses cha√Æn√©es:`, promiseChainee);
        pauseEntreSections();
        
        // 16. Void et undefined
        afficherSection("Void et Undefined - Absence de valeur", 16);
        VoidUndefinedExamples.afficherMessage("D√©monstration void et undefined");
        
        const valeurOptionnelle = VoidUndefinedExamples.obtenirValeurOptionnelle(Math.random() > 0.5);
        console.log(`‚úÖ Valeur optionnelle: ${valeurOptionnelle || "undefined"}`);
        
        const logger = new VoidUndefinedExamples.Logger();
        logger.log("Message de test");
        const dernierLog = logger.obtenirDernierLog();
        console.log(`‚úÖ Dernier log: ${dernierLog || "Aucun"}`);
        
        await VoidUndefinedExamples.operationAsynchrone();
        pauseEntreSections();
        
        // 17. Tableaux et collections
        afficherSection("Tableaux - Collections", 17);
        const tableauPersonnes = new ArrayExamples.TableauType(personnes);
        console.log(`‚úÖ Taille du tableau: ${tableauPersonnes.taille()}`);
        
        const sommeDemonstration = ArrayExamples.obtenirSomme([1, 2, 3, 4, 5]);
        console.log(`‚úÖ Somme [1,2,3,4,5]: ${sommeDemonstration}`);
        
        const sansDoublons = ArrayExamples.eliminerDoublons([1, 2, 2, 3, 3, 4]);
        console.log(`‚úÖ Sans doublons: [${sansDoublons.join(", ")}]`);
        
        const matrice = ArrayExamples.creerMatrice2D(3, 3, 1);
        console.log(`‚úÖ Matrice 3x3 cr√©√©e`);
        pauseEntreSections();
        
        // 18. Fonctions avec valeurs de retour
        afficherSection("Fonctions avec Retour - Types pr√©cis", 18);
        const calculatriceAvancee = new FnReturnExamples.CalculatriceAvancee();
        calculatriceAvancee.additionner(10, 5);
        calculatriceAvancee.additionner(20, 15);
        
        const stats = calculatriceAvancee.obtenirStatistiques();
        console.log(`‚úÖ Statistiques calculatrice: ${stats.nombreOperations} op√©rations`);
        
        const divisionFonction = calculatriceAvancee.diviserSecure(15, 3);
        console.log(`‚úÖ Division s√©curis√©e: ${divisionFonction.succes ? divisionFonction.resultat : divisionFonction.erreur}`);
        
        const transformation = FnReturnExamples.transformer("hello", (s: string) => s.toUpperCase());
        console.log(`‚úÖ Transformation: ${transformation}`);
        
        const utilisateurAsync = await FnReturnExamples.obtenirDonneesUtilisateur(123);
        console.log(`‚úÖ Utilisateur async: ${utilisateurAsync?.nom || "Non trouv√©"}`);
        pauseEntreSections();

        // R√©sum√© final
        afficherSection("R√©sum√© Final - Ma√Ætrise TypeScript", 19);
        console.log("üéâ Tous les 18 concepts TypeScript ont √©t√© d√©montr√©s avec succ√®s !");
        console.log("");
        console.log("üìã Concepts ma√Ætris√©s:");
        console.log("   ‚úÖ 1. Number - Types num√©riques et math√©matiques");
        console.log("   ‚úÖ 2. Function - Types de fonctions et callbacks");
        console.log("   ‚úÖ 3. Boolean - Types bool√©ens et logique");
        console.log("   ‚úÖ 4. Enum - √ânum√©rations et constantes");
        console.log("   ‚úÖ 5. String - Types cha√Ænes et manipulation");
        console.log("   ‚úÖ 6. Union - Types union et discrimination");
        console.log("   ‚úÖ 7. Never - Type never et gestion d'erreurs");
        console.log("   ‚úÖ 8. Extends - H√©ritage et extension de classes");
        console.log("   ‚úÖ 9. G√©n√©riques - Types et fonctions g√©n√©riques");
        console.log("   ‚úÖ 10. Object - Types objets et structures");
        console.log("   ‚úÖ 11. Alias - Alias de types pour simplification");
        console.log("   ‚úÖ 12. Objets anonymes - Structures ad-hoc");
        console.log("   ‚úÖ 13. Retour fonction - Types de retour pr√©cis");
        console.log("   ‚úÖ 14. Find - M√©thodes de recherche");
        console.log("   ‚úÖ 15. Intrins√®ques - Types built-in JavaScript");
        console.log("   ‚úÖ 16. Void/undefined - Absence de valeur");
        console.log("   ‚úÖ 17. Tableaux - Collections et matrices");
        console.log("   ‚úÖ 18. Fonctions retour - Patterns avanc√©s");
        console.log("");
        console.log("üöÄ Vous ma√Ætrisez maintenant tous les fondamentaux de TypeScript !");
        console.log("üìö Chaque concept dispose d'exemples d√©taill√©s dans son dossier");
        console.log("üîß Code pr√™t pour l'apprentissage et la production");

    } catch (error) {
        console.error("‚ùå Erreur lors de la d√©monstration:", error);
    }
}

// ‚úÖ FONCTION DE TEST DE PERFORMANCE
function testerPerformances(): void {
    console.log("\n‚ö° TESTS DE PERFORMANCE");
    console.log("=".repeat(50));
    
    // Test de performance des g√©n√©riques
    mesurer(() => {
        const cache = new GenericExamples.Cache<string>();
        for (let i = 0; i < 1000; i++) {
            cache.definir(`key${i}`, `value${i}`);
        }
        return cache;
    }, "Cache g√©n√©rique (1000 √©l√©ments)");
    
    // Test de performance des tableaux
    mesurer(() => {
        let tableau = ArrayExamples.creerTableau(1000);
        tableau = ArrayExamples.trierNombres(tableau);
        return ArrayExamples.obtenirSomme(tableau);
    }, "Op√©rations tableau (1000 √©l√©ments)");
    
    // Test de m√©morisation
    mesurer(() => {
        return FnReturnExamples.fibonacciMemorise(30);
    }, "Fibonacci m√©moris√© (n=30)");
    
    // Test de validation
    mesurer(() => {
        const personnes = Array.from({ length: 1000 }, (_, i) => 
            ({ nom: `Personne${i}`, age: 20 + (i % 50), email: `p${i}@test.com` })
        );
        const validateur = new BooleanExamples.ValidateurFormulaire();
        return personnes.every(p => validateur.validerEmail(p.email));
    }, "Validation emails (1000 personnes)");
}

// ‚úÖ FONCTION DE D√âMONSTRATION DES ERREURS
function demonstrationGestionErreurs(): void {
    console.log("\nüö® D√âMONSTRATION GESTION D'ERREURS");
    console.log("=".repeat(50));
    
    // Test avec Never type
    try {
        NeverExamples.gererErreur(new Error("Erreur de test"));
    } catch (error) {
        console.log(`‚úÖ Erreur g√©r√©e par Never: ${error}`);
    }
    
    // Test avec r√©sultat s√©curis√©
    const resultatSecure = FnReturnExamples.executerAvecGestionErreur(() => {
        if (Math.random() > 0.5) {
            throw new Error("Erreur al√©atoire");
        }
        return "Succ√®s!";
    });
    
    console.log(`‚úÖ Ex√©cution s√©curis√©e: ${resultatSecure.succes ? resultatSecure.resultat : resultatSecure.erreur}`);
    
    // Test validation avec void/undefined
    const validation = VoidUndefinedExamples.validerTableau([1, 2, 3, 4, 5], (n) => n > 0);
    console.log(`‚úÖ Validation tableau: ${validation.valide ? "‚úÖ Valide" : "‚ùå Invalide"}`);
    
    // Test union types avec erreur
    const reponseErreur = UnionExamples.traiterReponseAPI("Erreur serveur");
    console.log(`‚úÖ Gestion erreur API: ${reponseErreur}`);
}

// ‚úÖ EX√âCUTION PRINCIPALE
async function main(): Promise<void> {
    try {
        await demonstrationComplete();
        testerPerformances();
        demonstrationGestionErreurs();
        
        console.log("\n" + "=".repeat(80));
        console.log("üéâ PROJET TYPESCRIPT COMPLET - TOUS LES CONCEPTS MA√éTRIS√âS");
        console.log("üìö 18 concepts d√©montr√©s avec des exemples pratiques");
        console.log("üîß Code pr√™t pour l'apprentissage et la production");
        console.log("‚ö° Tests de performance inclus");
        console.log("üö® Gestion d'erreurs d√©montr√©e");
        console.log("üìÅ Structure organis√©e en dossiers th√©matiques");
        console.log("=" .repeat(80));
        
    } catch (error) {
        console.error("‚ùå Erreur fatale:", error);
    }
}

// Ex√©cution automatique si fichier principal
if (require.main === module) {
    main().catch(console.error);
}

// ‚úÖ EXPORTS POUR UTILISATION COMME MODULE
export {
    main,
    demonstrationComplete,
    testerPerformances,
    demonstrationGestionErreurs,
    mesurer,
    // Tous les modules pour r√©utilisation
    NumberExamples,
    FunctionExamples,
    BooleanExamples,
    EnumExamples,
    StringExamples,
    UnionExamples,
    NeverExamples,
    ExtendsExamples,
    GenericExamples,
    ObjectExamples,
    AliasExamples,
    AnonymousExamples,
    ReturnExamples,
    FindExamples,
    IntrinsicExamples,
    VoidUndefinedExamples,
    ArrayExamples,
    FnReturnExamples
};
